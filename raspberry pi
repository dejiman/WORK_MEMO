* install BMP280 

1. i2c Enable => raspberry pi configuration 

2. connect raspberry pi 

 1 => VIN/VCC
 
 6 => GND
 
 3 => SDA or SCK
 
 5 => SCL or SDI

* ic2 address check 

 i2cdetect -y 1
 
 * install BMP280 library 
 
 git clone https://github.com/TomFoerster/BMP280.git
 
 sudo python setup.py install 
 
 * code for check BMP280
  
import time

import BMP280.BMP280 as BMP280

sensor = BMP280.BMP280(modep=BMP280.BMP280_ULTRAHIGHRES,modet=BMP280.BMP280_T_O2,filter=BMP280.BMP280_FILTER_OFF,address=BMP280.BMP280_I2CADDR2)

while True:
        temp1, pressure1 = sensor.read_temperature_pressure()
        
        altitude1 = sensor.read_sealevel_pressure(altitude_m= 330.0)

        print("temp : " + str(temp1) + ", pressure : " + str(pressure1) + ", altitude : " + str(altitude1) )
        
        time.sleep(10)



# Distributed with a free-will license.
# Use it any way you want, profit or free, provided it fits in the licenses of its associated works.
# BMP280
# This code is designed to work with the BMP280_I2CS I2C Mini Module available from ControlEverything.com.
# https://www.controleverything.com/content/Barometer?sku=BMP280_I2CSs#tabs-0-product_tabset-2


import smbus
import time

# Get I2C bus
bus = smbus.SMBus(1)

# BMP280 address, 0x76(118)
# Read data back from 0x88(136), 24 bytes
b1 = bus.read_i2c_block_data(0x76, 0x88, 24)

# Convert the data
# Temp coefficents
dig_T1 = b1[1] * 256 + b1[0]
dig_T2 = b1[3] * 256 + b1[2]
if dig_T2 > 32767 :
    dig_T2 -= 65536
dig_T3 = b1[5] * 256 + b1[4]
if dig_T3 > 32767 :
    dig_T3 -= 65536

# Pressure coefficents
dig_P1 = b1[7] * 256 + b1[6]
dig_P2 = b1[9] * 256 + b1[8]
if dig_P2 > 32767 :
    dig_P2 -= 65536
dig_P3 = b1[11] * 256 + b1[10]
if dig_P3 > 32767 :
    dig_P3 -= 65536
dig_P4 = b1[13] * 256 + b1[12]
if dig_P4 > 32767 :
    dig_P4 -= 65536
dig_P5 = b1[15] * 256 + b1[14]
if dig_P5 > 32767 :
    dig_P5 -= 65536
dig_P6 = b1[17] * 256 + b1[16]
if dig_P6 > 32767 :
    dig_P6 -= 65536
dig_P7 = b1[19] * 256 + b1[18]
if dig_P7 > 32767 :
    dig_P7 -= 65536
dig_P8 = b1[21] * 256 + b1[20]
if dig_P8 > 32767 :
    dig_P8 -= 65536
dig_P9 = b1[23] * 256 + b1[22]
if dig_P9 > 32767 :
    dig_P9 -= 65536

# BMP280 address, 0x76(118)
# Select Control measurement register, 0xF4(244)
#		0x27(39)	Pressure and Temperature Oversampling rate = 1
#					Normal mode
bus.write_byte_data(0x76, 0xF4, 0x27)
# BMP280 address, 0x76(118)
# Select Configuration register, 0xF5(245)
#		0xA0(00)	Stand_by time = 1000 ms
bus.write_byte_data(0x76, 0xF5, 0xA0)

time.sleep(0.5)

# BMP280 address, 0x76(118)
# Read data back from 0xF7(247), 8 bytes
# Pressure MSB, Pressure LSB, Pressure xLSB, Temperature MSB, Temperature LSB
# Temperature xLSB, Humidity MSB, Humidity LSB
data = bus.read_i2c_block_data(0x76, 0xF7, 8)

# Convert pressure and temperature data to 19-bits
adc_p = ((data[0] * 65536) + (data[1] * 256) + (data[2] & 0xF0)) / 16
adc_t = ((data[3] * 65536) + (data[4] * 256) + (data[5] & 0xF0)) / 16

# Temperature offset calculations
var1 = ((adc_t) / 16384.0 - (dig_T1) / 1024.0) * (dig_T2)
var2 = (((adc_t) / 131072.0 - (dig_T1) / 8192.0) * ((adc_t)/131072.0 - (dig_T1)/8192.0)) * (dig_T3)
t_fine = (var1 + var2)
cTemp = (var1 + var2) / 5120.0
fTemp = cTemp * 1.8 + 32

# Pressure offset calculations
var1 = (t_fine / 2.0) - 64000.0
var2 = var1 * var1 * (dig_P6) / 32768.0
var2 = var2 + var1 * (dig_P5) * 2.0
var2 = (var2 / 4.0) + ((dig_P4) * 65536.0)
var1 = ((dig_P3) * var1 * var1 / 524288.0 + ( dig_P2) * var1) / 524288.0
var1 = (1.0 + var1 / 32768.0) * (dig_P1)
p = 1048576.0 - adc_p
p = (p - (var2 / 4096.0)) * 6250.0 / var1
var1 = (dig_P9) * p * p / 2147483648.0
var2 = p * (dig_P8) / 32768.0
pressure = (p + (var1 + var2 + (dig_P7)) / 16.0) / 100

# Output data to screen
print "Temperature in Celsius : %.2f C" %cTemp
print "Temperature in Fahrenheit : %.2f F" %fTemp
print "Pressure : %.2f hPa " %pressure




**** install opencv-python on raspberry pi ... failed to proved ****

1. expand file system 
2. sudo apt-get update && sudo apt-get upgrade
3. sudo apt-get install build-essential cmake pkg-config
4. sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
5. sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
6. sudo apt-get install libxvidcore-dev libx264-dev
7. sudo apt-get install libgtk2.0-dev libgtk-3-dev
8. sudo apt-get install libatlas-base-dev gfortran
9. sudo apt-get install python2.7-dev python3-dev
10. wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.3.0.zip
11. unzip opencv.zip
12. wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.3.0.zip
13. unzip opencv_contrib.zip
14. wget https://bootstrap.pypa.io/get-pip.py
15. sudo python get-pip.py
16. sudo python3 get-pip.py
17. sudo pip install virtualenv virtualenvwrapper
18. sudo rm -rf ~/.cache/pip
# virtualenv and virtualenvwrapper
19. export WORKON_HOME=$HOME/.virtualenvs
20. source /usr/local/bin/virtualenvwrapper.sh
21. echo -e "\n# virtualenv and virtualenvwrapper" >> ~/.profile
22. echo "export WORKON_HOME=$HOME/.virtualenvs" >> ~/.profile
23. echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.profile
24. source ~/.profile
25. mkvirtualenv cv -p python2
26. mkvirtualenv cv -p python3
27. source ~/.profile
28. workon cv
29. pip install numpy
30. workon cv
31. cd ~/opencv-3.3.0/
32. mkdir build
33. cd build
34. cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.3.0/modules \
    -D BUILD_EXAMPLES=ON ..
35. 
# set size to absolute value, leaving empty (default) then uses computed value
#   you most likely don't want this, unless you have an special disk situation
# CONF_SWAPSIZE=100
CONF_SWAPSIZE=1024
36. 
 sudo /etc/init.d/dphys-swapfile stop
 sudo /etc/init.d/dphys-swapfile start

37.
 make -j4
38.  	
 sudo make install
 sudo ldconfig
 
 
 
 

$ source ~/.profile 
$ workon cv
$ python
>>> import cv2
>>> cv2.__version__
'3.3.0'
>>>

# set size to absolute value, leaving empty (default) then uses computed value
#   you most likely don't want this, unless you have an special disk situation
CONF_SWAPSIZE=100
# CONF_SWAPSIZE=1024
'



**** ds18b20 gpi python *****


sudo modprobe w1-gpio
sudo modprobe w1-therm
cd /sys/bus/w1/devices/
ls 
28-05169223b9ff  w1_bus_master1


28-xxx -> ds18b20 sensor's code number 

*** ds18b20 python code ***


import os
import time
 
# ds18b20
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')
 
#
temp_sensor='/sys/bus/w1/devices/(ds18b20 sensor's code number)/w1_slave'
 
#
def temp_raw():
    f = open(temp_sensor,'r')
    lines = f.readlines()
    f.close()
    return lines
 

def read_temp():
    lines = temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = temp_raw()
 
 
    temp_output = lines[1].find('t=')
 
    if temp_output != -1:
        temp_string = lines[1].strip()[temp_output+2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0/5.0 + 32.0
        return temp_c, temp_f
 
 
while True:
    print(read_temp())
    time.sleep(1)


****** camera with button ****

import time
import picamera
import RPi.GPIO as GPIO  # new

GPIO.setmode(GPIO.BCM)  # new
GPIO.setup(21, GPIO.IN, GPIO.PUD_UP)  # check GPIO number and use it

with picamera.PiCamera() as camera:
    camera.start_preview()
    GPIO.wait_for_edge(21, GPIO.FALLING)  # new
    camera.capture('/home/pi/Desktop/image.jpg')
    camera.stop_preview()
    
    







